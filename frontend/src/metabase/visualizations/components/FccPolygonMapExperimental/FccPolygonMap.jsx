import L from "leaflet";
import "leaflet.markercluster";
import 'leaflet.markercluster/dist/MarkerCluster.css';
import 'leaflet.markercluster/dist/MarkerCluster.Default.css';
import _ from "underscore";

import { getSubpathSafeUrl } from "metabase/lib/urls";
import { isPK } from "metabase-lib/v1/types/utils/isa";

import LeafletMap from "./LeafletMap";

const _generateIcon = (moviment_status, load_status) => {
  let circleColor = `#9CA3AE`
  switch (moviment_status) {
    case "TRAVELING":
      circleColor = `#1EC965`;
      break;
    case "ENGINE_STOPPED":
      circleColor = `#EF314C`;
      break;
    case "ENGINE_OFF":
      circleColor = `#4B5563`;
      break;
    case "OFFLINE":
      circleColor = `#9CA3AE`;
      break;
    case "NO_TELEMETRY":
      circleColor = `#1F49D2`;
      break;
    case "MAINTENANCE":
      circleColor = `#4B5563`;
      break;
    case "CLEANING":
      circleColor = `#4B5563`;
      break;
    case "ENGINE_IDLE":
      circleColor = `#EF314C`;
      break;
    default:
      circleColor = `#9CA3AE`;
  }
  let circle = `<circle cx="52.5" cy="52.5" r="47.5" fill="#D9D9D9" stroke="${circleColor}" stroke-width="10"/>`
  let icon = ``
  switch (load_status) {
    case "EMPTY":
      icon = `
      <path d="M79.6004 68.545V60.5238C79.6004 60.1139 79.4902 59.708 79.2757 59.3293C79.0613 58.9506 78.7469 58.6064 78.3506 58.3167C77.9544 58.0267 77.484 57.7968 76.9664 57.64C76.4486 57.4829 75.8937 57.4024 75.3332 57.4024H74.2148V28.1059C74.2137 27.977 74.1705 27.8502 74.0888 27.7359C74.0072 27.6217 73.8894 27.5234 73.7451 27.4493L70.9832 26.1461C70.826 26.0783 70.6477 26.0412 70.4654 26.0384C70.2829 26.0356 70.1027 26.0672 69.9418 26.1301C69.7808 26.193 69.6448 26.2851 69.5467 26.3976C69.4484 26.5101 69.3916 26.6392 69.3813 26.7725V36.1877L68.5665 34.5916C68.0348 33.5462 67.0795 32.6446 65.8283 32.0074C64.5771 31.3701 63.0896 31.0275 61.5651 31.0255H42.908C41.3742 31.0271 39.8779 31.3728 38.621 32.0158C37.3641 32.6589 36.407 33.5685 35.8788 34.6219L35.1055 36.1877V26.7725C35.1041 26.6329 35.0515 26.4961 34.953 26.3765C34.8545 26.2569 34.7139 26.1589 34.5458 26.0928C34.3777 26.0267 34.1884 25.9949 33.9977 26.0007C33.8071 26.0065 33.622 26.0498 33.4621 26.1259L30.7001 27.4291C30.556 27.5032 30.4381 27.6015 30.3564 27.7157C30.2748 27.83 30.2316 27.9568 30.2306 28.0857V57.3822H29.112C28.5517 57.3822 27.9968 57.4627 27.479 57.6198C26.9613 57.7767 26.4909 58.0065 26.0946 58.2965C25.6984 58.5862 25.3841 58.9304 25.1696 59.3091C24.9552 59.6878 24.8448 60.0937 24.8448 60.5037V68.5248H23.0634C22.7813 68.5248 22.5109 68.6067 22.3114 68.7527C22.112 68.8985 22 69.0965 22 69.3026V73.6465C22 73.7487 22.0275 73.8499 22.0809 73.9443C22.1344 74.0386 22.2127 74.1243 22.3114 74.1966C22.4102 74.269 22.5274 74.3262 22.6564 74.3652C22.7854 74.4044 22.9237 74.4246 23.0634 74.4246H27.662V76.4449C27.6657 76.8584 27.8928 77.2542 28.2938 77.5456C28.6948 77.8372 29.2372 78.0006 29.8025 78.0006H35.4645C36.0286 78.0006 36.5695 77.8367 36.9683 77.5451C37.3672 77.2533 37.5912 76.8574 37.5912 76.4449V74.4246H66.8955V76.4449C66.8955 76.8574 67.1196 77.2533 67.5184 77.5451C67.9173 77.8367 68.4583 78.0006 69.0223 78.0006H74.6843C75.2495 78.0006 75.7919 77.8372 76.1929 77.5456C76.5941 77.2542 76.8212 76.8584 76.8247 76.4449V74.4246H81.4234C81.563 74.4246 81.7014 74.4044 81.8304 74.3652C81.9595 74.3262 82.0766 74.269 82.1753 74.1966C82.2741 74.1243 82.3525 74.0386 82.4057 73.9443C82.4592 73.8499 82.4869 73.7487 82.4869 73.6465V69.3228C82.4869 69.1167 82.3748 68.9187 82.1753 68.7729C81.9759 68.6269 81.7054 68.545 81.4234 68.545H79.6004ZM36.5279 40.5418H67.9588V48.2396H36.5279V40.5418ZM35.7959 66.3629H32.1502C31.6178 66.3603 31.1085 66.2037 30.7334 65.9274C30.3583 65.651 30.1477 65.2775 30.1478 64.888C30.1478 64.4968 30.3602 64.1217 30.7383 63.8451C31.1164 63.5685 31.6292 63.4131 32.164 63.4131H35.8098C36.3445 63.4131 36.8573 63.5685 37.2355 63.8451C37.6136 64.1217 37.826 64.4968 37.826 64.888C37.826 65.0826 37.7734 65.2751 37.6712 65.4548C37.569 65.6344 37.4193 65.7975 37.2306 65.9346C37.0419 66.0715 36.818 66.18 36.5718 66.2537C36.3255 66.3272 36.0619 66.3643 35.7959 66.3629ZM59.4934 66.7972H44.9933C44.7117 66.7986 44.4325 66.7592 44.172 66.6808C43.9114 66.6026 43.6747 66.4873 43.4756 66.3418C43.2765 66.196 43.1189 66.0229 43.0119 65.8323C42.905 65.6416 42.8509 65.4376 42.8528 65.2315V55.3415C42.8527 55.1363 42.9082 54.9332 43.0159 54.7437C43.1237 54.5543 43.2816 54.3824 43.4805 54.2378C43.6795 54.0931 43.9155 53.9788 44.1752 53.9013C44.4348 53.8236 44.7128 53.7844 44.9933 53.7858H59.4934C59.774 53.7844 60.052 53.8236 60.3115 53.9013C60.5712 53.9788 60.8073 54.0931 61.0062 54.2378C61.2052 54.3824 61.3631 54.5543 61.4708 54.7437C61.5787 54.9332 61.634 55.1363 61.634 55.3415V65.2315C61.6359 65.4376 61.5817 65.6416 61.4747 65.8323C61.368 66.0229 61.2103 66.196 61.0111 66.3418C60.812 66.4873 60.5755 66.6026 60.3148 66.6808C60.0544 66.7592 59.7752 66.7986 59.4934 66.7972ZM72.3365 66.3629H68.6908C68.1561 66.3629 67.6433 66.2075 67.2651 65.9309C66.8871 65.6543 66.6745 65.2791 66.6745 64.888C66.6745 64.4968 66.8871 64.1217 67.2651 63.8451C67.6433 63.5685 68.1561 63.4131 68.6908 63.4131H72.3365C72.8595 63.4157 73.3606 63.5666 73.7343 63.8343C74.1078 64.1019 74.3246 64.4651 74.3389 64.8476C74.3464 65.0439 74.3002 65.2392 74.2029 65.4221C74.1057 65.605 73.9598 65.7719 73.7733 65.9133C73.5868 66.0544 73.3636 66.1668 73.1168 66.2441C72.8702 66.3213 72.6049 66.3617 72.3365 66.3629ZM59.1483 59.4934H45.3385C45.1995 59.4948 45.0615 59.476 44.9326 59.438C44.8037 59.3999 44.6863 59.3436 44.5874 59.2722C44.4885 59.2008 44.4099 59.1156 44.3563 59.0219C44.3028 58.928 44.2751 58.8273 44.2752 58.7256C44.2751 58.624 44.3028 58.5233 44.3563 58.4296C44.4099 58.3357 44.4885 58.2507 44.5874 58.1793C44.6863 58.1077 44.8037 58.0513 44.9326 58.0135C45.0615 57.9755 45.1995 57.9565 45.3385 57.9579H59.1483C59.4266 57.9579 59.6935 58.0389 59.8904 58.1828C60.0872 58.3268 60.1977 58.5221 60.1977 58.7256C60.1977 58.9294 60.0872 59.1245 59.8904 59.2687C59.6935 59.4126 59.4266 59.4934 59.1483 59.4934ZM59.1483 56.372H45.3385C45.1995 56.3731 45.0615 56.3543 44.9326 56.3163C44.8037 56.2783 44.6863 56.2222 44.5874 56.1505C44.4885 56.0792 44.4099 55.9942 44.3563 55.9003C44.3028 55.8064 44.2751 55.7059 44.2752 55.6042C44.2751 55.5025 44.3028 55.4018 44.3563 55.3079C44.4099 55.2142 44.4885 55.129 44.5874 55.0576C44.6863 54.9863 44.8037 54.9299 44.9326 54.8919C45.0615 54.8538 45.1995 54.8351 45.3385 54.8365H59.1483C59.4266 54.8365 59.6935 54.9172 59.8904 55.0612C60.0872 55.2053 60.1977 55.4004 60.1977 55.6042C60.1977 55.8078 60.0872 56.0031 59.8904 56.147C59.6935 56.2909 59.4266 56.372 59.1483 56.372ZM59.1483 65.7367H45.3385C45.1995 65.7379 45.0615 65.7191 44.9326 65.6811C44.8037 65.643 44.6863 65.5867 44.5874 65.5153C44.4885 65.444 44.4099 65.3587 44.3563 65.265C44.3028 65.1711 44.2751 65.0706 44.2752 64.9687C44.2656 64.8631 44.2861 64.7567 44.3355 64.6572C44.3848 64.5574 44.4618 64.4661 44.5617 64.3893C44.6616 64.3123 44.7822 64.2515 44.9159 64.2104C45.0496 64.1693 45.1935 64.1489 45.3385 64.1505H59.1483C59.4266 64.1505 59.6935 64.2315 59.8904 64.3755C60.0872 64.5194 60.1977 64.7147 60.1977 64.9183C60.2074 65.0232 60.1872 65.1286 60.1386 65.2277C60.09 65.3268 60.0143 65.4174 59.916 65.4942C59.8174 65.571 59.6985 65.632 59.5666 65.6738C59.4345 65.7154 59.2921 65.737 59.1483 65.7367ZM59.1483 62.6151H45.3385C45.1995 62.6165 45.0615 62.5974 44.9326 62.5594C44.8037 62.5216 44.6863 62.4653 44.5874 62.3937C44.4885 62.3223 44.4099 62.2373 44.3563 62.1434C44.3028 62.0497 44.2751 61.949 44.2752 61.8473C44.2751 61.7457 44.3028 61.6449 44.3563 61.551C44.4099 61.4573 44.4885 61.3721 44.5874 61.3007C44.6863 61.2294 44.8037 61.173 44.9326 61.135C45.0615 61.097 45.1995 61.0782 45.3385 61.0796H59.1483C59.4266 61.0796 59.6935 61.1603 59.8904 61.3045C60.0872 61.4484 60.1977 61.6438 60.1977 61.8473C60.1977 62.0509 60.0872 62.2462 59.8904 62.3901C59.6935 62.5341 59.4266 62.6151 59.1483 62.6151Z" fill="#969696"/>
      `;
      break;
    case "LOADING":
      icon = `
      <path d="M78 32V64.8124C78 69.8902 73.8782 74 68.7856 74C63.767 74 59.6946 70.005 59.5712 65.034L29.3281 73.2534C27.9213 73.6308 26.4815 72.8106 26.0948 71.4078C25.7082 70.005 26.5391 68.5696 27.946 68.184L54.3058 61.0226V37.25C54.3058 34.3543 56.667 32 59.5712 32H78ZM72.7346 64.8124C72.7346 63.7682 72.3186 62.7666 71.578 62.0282C70.8374 61.2898 69.833 60.875 68.7856 60.875C67.7382 60.875 66.7338 61.2898 65.9932 62.0282C65.2526 62.7666 64.8366 63.7682 64.8366 64.8124C64.8366 65.8568 65.2526 66.8582 65.9932 67.5968C66.7338 68.3352 67.7382 68.75 68.7856 68.75C69.833 68.75 70.8374 68.3352 71.578 67.5968C72.3186 66.8582 72.7346 65.8568 72.7346 64.8124Z" fill="#000000"/>
      <path d="M45.4781 60.5358L29.3769 66.1981C28.2548 66.5928 27.0586 65.992 26.7049 64.8563C26.3513 63.7207 26.9743 62.4801 28.0964 62.0855L44.1976 56.4231C45.3196 56.0285 46.5159 56.6293 46.8695 57.7649C47.2231 58.9006 46.6002 60.1411 45.4781 60.5358Z" fill="#000000"/>
      <path d="M51.7292 51.9018L35.519 57.1772C34.3871 57.5456 33.2023 56.917 32.8727 55.7732C32.5432 54.6294 33.1936 53.4035 34.3255 53.0351L50.5357 47.7597C51.6676 47.3913 52.8523 48.0199 53.1819 49.1637C53.5115 50.3075 52.8611 51.5334 51.7292 51.9018Z" fill="#000000"/>
      `;
      break;
    case "HALF_LOADED":
      icon = `
      <path d="M78 32V64.8124C78 69.8902 73.8782 74 68.7856 74C63.767 74 59.6946 70.005 59.5712 65.034L29.3281 73.2534C27.9213 73.6308 26.4815 72.8106 26.0948 71.4078C25.7082 70.005 26.5391 68.5696 27.946 68.184L54.3058 61.0226V37.25C54.3058 34.3543 56.667 32 59.5712 32H78ZM72.7346 64.8124C72.7346 63.7682 72.3186 62.7666 71.578 62.0282C70.8374 61.2898 69.833 60.875 68.7856 60.875C67.7382 60.875 66.7338 61.2898 65.9932 62.0282C65.2526 62.7666 64.8366 63.7682 64.8366 64.8124C64.8366 65.8568 65.2526 66.8582 65.9932 67.5968C66.7338 68.3352 67.7382 68.75 68.7856 68.75C69.833 68.75 70.8374 68.3352 71.578 67.5968C72.3186 66.8582 72.7346 65.8568 72.7346 64.8124Z" fill="#000000"/>
      <path d="M45.4781 60.5358L29.3769 66.1981C28.2548 66.5928 27.0586 65.992 26.7049 64.8563C26.3513 63.7207 26.9743 62.4801 28.0964 62.0855L44.1976 56.4231C45.3196 56.0285 46.5159 56.6293 46.8695 57.7649C47.2231 58.9006 46.6002 60.1411 45.4781 60.5358Z" fill="#000000"/>
      <path d="M51.7292 51.9018L35.519 57.1772C34.3871 57.5456 33.2023 56.917 32.8727 55.7732C32.5432 54.6294 33.1936 53.4035 34.3255 53.0351L50.5357 47.7597C51.6676 47.3913 52.8523 48.0199 53.1819 49.1637C53.5115 50.3075 52.8611 51.5334 51.7292 51.9018Z" fill="#000000"/>
      `;
      break;
    case "UNLOADING":
      icon = `
      <path d="M78 32V64.8124C78 69.8902 73.8782 74 68.7856 74C63.767 74 59.6946 70.005 59.5712 65.034L29.3281 73.2534C27.9213 73.6308 26.4815 72.8106 26.0948 71.4078C25.7082 70.005 26.5391 68.5696 27.946 68.184L54.3058 61.0226V37.25C54.3058 34.3543 56.667 32 59.5712 32H78ZM72.7346 64.8124C72.7346 63.7682 72.3186 62.7666 71.578 62.0282C70.8374 61.2898 69.833 60.875 68.7856 60.875C67.7382 60.875 66.7338 61.2898 65.9932 62.0282C65.2526 62.7666 64.8366 63.7682 64.8366 64.8124C64.8366 65.8568 65.2526 66.8582 65.9932 67.5968C66.7338 68.3352 67.7382 68.75 68.7856 68.75C69.833 68.75 70.8374 68.3352 71.578 67.5968C72.3186 66.8582 72.7346 65.8568 72.7346 64.8124Z" fill="#969696"/>
      <path d="M45.4781 60.5358L29.3769 66.1981C28.2548 66.5928 27.0586 65.992 26.7049 64.8563C26.3513 63.7207 26.9743 62.4801 28.0964 62.0855L44.1976 56.4231C45.3196 56.0285 46.5159 56.6293 46.8695 57.7649C47.2231 58.9006 46.6002 60.1411 45.4781 60.5358Z" fill="#969696"/>
      <path d="M51.7292 51.9018L35.519 57.1772C34.3871 57.5456 33.2023 56.917 32.8727 55.7732C32.5432 54.6294 33.1936 53.4035 34.3255 53.0351L50.5357 47.7597C51.6676 47.3913 52.8523 48.0199 53.1819 49.1637C53.5115 50.3075 52.8611 51.5334 51.7292 51.9018Z" fill="#969696"/>
      `;
      break;
    case "LOADED":
      icon = `
      <path d="M79.6004 68.545V60.5238C79.6004 60.1139 79.4902 59.708 79.2757 59.3293C79.0613 58.9506 78.7469 58.6064 78.3506 58.3167C77.9544 58.0267 77.484 57.7968 76.9664 57.64C76.4486 57.4829 75.8937 57.4024 75.3332 57.4024H74.2148V28.1059C74.2137 27.977 74.1705 27.8502 74.0888 27.7359C74.0072 27.6217 73.8894 27.5234 73.7451 27.4493L70.9832 26.1461C70.826 26.0783 70.6477 26.0412 70.4654 26.0384C70.2829 26.0356 70.1027 26.0672 69.9418 26.1301C69.7808 26.193 69.6448 26.2851 69.5467 26.3976C69.4484 26.5101 69.3916 26.6392 69.3813 26.7725V36.1877L68.5665 34.5916C68.0348 33.5462 67.0795 32.6446 65.8283 32.0074C64.5771 31.3701 63.0896 31.0275 61.5651 31.0255H42.908C41.3742 31.0271 39.8779 31.3728 38.621 32.0158C37.3641 32.6589 36.407 33.5685 35.8788 34.6219L35.1055 36.1877V26.7725C35.1041 26.6329 35.0515 26.4961 34.953 26.3765C34.8545 26.2569 34.7139 26.1589 34.5458 26.0928C34.3777 26.0267 34.1884 25.9949 33.9977 26.0007C33.8071 26.0065 33.622 26.0498 33.4621 26.1259L30.7001 27.4291C30.556 27.5032 30.4381 27.6015 30.3564 27.7157C30.2748 27.83 30.2316 27.9568 30.2306 28.0857V57.3822H29.112C28.5517 57.3822 27.9968 57.4627 27.479 57.6198C26.9613 57.7767 26.4909 58.0065 26.0946 58.2965C25.6984 58.5862 25.3841 58.9304 25.1696 59.3091C24.9552 59.6878 24.8448 60.0937 24.8448 60.5037V68.5248H23.0634C22.7813 68.5248 22.5109 68.6067 22.3114 68.7527C22.112 68.8985 22 69.0965 22 69.3026V73.6465C22 73.7487 22.0275 73.8499 22.0809 73.9443C22.1344 74.0386 22.2127 74.1243 22.3114 74.1966C22.4102 74.269 22.5274 74.3262 22.6564 74.3652C22.7854 74.4044 22.9237 74.4246 23.0634 74.4246H27.662V76.4449C27.6657 76.8584 27.8928 77.2542 28.2938 77.5456C28.6948 77.8372 29.2372 78.0006 29.8025 78.0006H35.4645C36.0286 78.0006 36.5695 77.8367 36.9683 77.5451C37.3672 77.2533 37.5912 76.8574 37.5912 76.4449V74.4246H66.8955V76.4449C66.8955 76.8574 67.1196 77.2533 67.5184 77.5451C67.9173 77.8367 68.4583 78.0006 69.0223 78.0006H74.6843C75.2495 78.0006 75.7919 77.8372 76.1929 77.5456C76.5941 77.2542 76.8212 76.8584 76.8247 76.4449V74.4246H81.4234C81.563 74.4246 81.7014 74.4044 81.8304 74.3652C81.9595 74.3262 82.0766 74.269 82.1753 74.1966C82.2741 74.1243 82.3525 74.0386 82.4057 73.9443C82.4592 73.8499 82.4869 73.7487 82.4869 73.6465V69.3228C82.4869 69.1167 82.3748 68.9187 82.1753 68.7729C81.9759 68.6269 81.7054 68.545 81.4234 68.545H79.6004ZM36.5279 40.5418H67.9588V48.2396H36.5279V40.5418ZM35.7959 66.3629H32.1502C31.6178 66.3603 31.1085 66.2037 30.7334 65.9274C30.3583 65.651 30.1477 65.2775 30.1478 64.888C30.1478 64.4968 30.3602 64.1217 30.7383 63.8451C31.1164 63.5685 31.6292 63.4131 32.164 63.4131H35.8098C36.3445 63.4131 36.8573 63.5685 37.2355 63.8451C37.6136 64.1217 37.826 64.4968 37.826 64.888C37.826 65.0826 37.7734 65.2751 37.6712 65.4548C37.569 65.6344 37.4193 65.7975 37.2306 65.9346C37.0419 66.0715 36.818 66.18 36.5718 66.2537C36.3255 66.3272 36.0619 66.3643 35.7959 66.3629ZM59.4934 66.7972H44.9933C44.7117 66.7986 44.4325 66.7592 44.172 66.6808C43.9114 66.6026 43.6747 66.4873 43.4756 66.3418C43.2765 66.196 43.1189 66.0229 43.0119 65.8323C42.905 65.6416 42.8509 65.4376 42.8528 65.2315V55.3415C42.8527 55.1363 42.9082 54.9332 43.0159 54.7437C43.1237 54.5543 43.2816 54.3824 43.4805 54.2378C43.6795 54.0931 43.9155 53.9788 44.1752 53.9013C44.4348 53.8236 44.7128 53.7844 44.9933 53.7858H59.4934C59.774 53.7844 60.052 53.8236 60.3115 53.9013C60.5712 53.9788 60.8073 54.0931 61.0062 54.2378C61.2052 54.3824 61.3631 54.5543 61.4708 54.7437C61.5787 54.9332 61.634 55.1363 61.634 55.3415V65.2315C61.6359 65.4376 61.5817 65.6416 61.4747 65.8323C61.368 66.0229 61.2103 66.196 61.0111 66.3418C60.812 66.4873 60.5755 66.6026 60.3148 66.6808C60.0544 66.7592 59.7752 66.7986 59.4934 66.7972ZM72.3365 66.3629H68.6908C68.1561 66.3629 67.6433 66.2075 67.2651 65.9309C66.8871 65.6543 66.6745 65.2791 66.6745 64.888C66.6745 64.4968 66.8871 64.1217 67.2651 63.8451C67.6433 63.5685 68.1561 63.4131 68.6908 63.4131H72.3365C72.8595 63.4157 73.3606 63.5666 73.7343 63.8343C74.1078 64.1019 74.3246 64.4651 74.3389 64.8476C74.3464 65.0439 74.3002 65.2392 74.2029 65.4221C74.1057 65.605 73.9598 65.7719 73.7733 65.9133C73.5868 66.0544 73.3636 66.1668 73.1168 66.2441C72.8702 66.3213 72.6049 66.3617 72.3365 66.3629ZM59.1483 59.4934H45.3385C45.1995 59.4948 45.0615 59.476 44.9326 59.438C44.8037 59.3999 44.6863 59.3436 44.5874 59.2722C44.4885 59.2008 44.4099 59.1156 44.3563 59.0219C44.3028 58.928 44.2751 58.8273 44.2752 58.7256C44.2751 58.624 44.3028 58.5233 44.3563 58.4296C44.4099 58.3357 44.4885 58.2507 44.5874 58.1793C44.6863 58.1077 44.8037 58.0513 44.9326 58.0135C45.0615 57.9755 45.1995 57.9565 45.3385 57.9579H59.1483C59.4266 57.9579 59.6935 58.0389 59.8904 58.1828C60.0872 58.3268 60.1977 58.5221 60.1977 58.7256C60.1977 58.9294 60.0872 59.1245 59.8904 59.2687C59.6935 59.4126 59.4266 59.4934 59.1483 59.4934ZM59.1483 56.372H45.3385C45.1995 56.3731 45.0615 56.3543 44.9326 56.3163C44.8037 56.2783 44.6863 56.2222 44.5874 56.1505C44.4885 56.0792 44.4099 55.9942 44.3563 55.9003C44.3028 55.8064 44.2751 55.7059 44.2752 55.6042C44.2751 55.5025 44.3028 55.4018 44.3563 55.3079C44.4099 55.2142 44.4885 55.129 44.5874 55.0576C44.6863 54.9863 44.8037 54.9299 44.9326 54.8919C45.0615 54.8538 45.1995 54.8351 45.3385 54.8365H59.1483C59.4266 54.8365 59.6935 54.9172 59.8904 55.0612C60.0872 55.2053 60.1977 55.4004 60.1977 55.6042C60.1977 55.8078 60.0872 56.0031 59.8904 56.147C59.6935 56.2909 59.4266 56.372 59.1483 56.372ZM59.1483 65.7367H45.3385C45.1995 65.7379 45.0615 65.7191 44.9326 65.6811C44.8037 65.643 44.6863 65.5867 44.5874 65.5153C44.4885 65.444 44.4099 65.3587 44.3563 65.265C44.3028 65.1711 44.2751 65.0706 44.2752 64.9687C44.2656 64.8631 44.2861 64.7567 44.3355 64.6572C44.3848 64.5574 44.4618 64.4661 44.5617 64.3893C44.6616 64.3123 44.7822 64.2515 44.9159 64.2104C45.0496 64.1693 45.1935 64.1489 45.3385 64.1505H59.1483C59.4266 64.1505 59.6935 64.2315 59.8904 64.3755C60.0872 64.5194 60.1977 64.7147 60.1977 64.9183C60.2074 65.0232 60.1872 65.1286 60.1386 65.2277C60.09 65.3268 60.0143 65.4174 59.916 65.4942C59.8174 65.571 59.6985 65.632 59.5666 65.6738C59.4345 65.7154 59.2921 65.737 59.1483 65.7367ZM59.1483 62.6151H45.3385C45.1995 62.6165 45.0615 62.5974 44.9326 62.5594C44.8037 62.5216 44.6863 62.4653 44.5874 62.3937C44.4885 62.3223 44.4099 62.2373 44.3563 62.1434C44.3028 62.0497 44.2751 61.949 44.2752 61.8473C44.2751 61.7457 44.3028 61.6449 44.3563 61.551C44.4099 61.4573 44.4885 61.3721 44.5874 61.3007C44.6863 61.2294 44.8037 61.173 44.9326 61.135C45.0615 61.097 45.1995 61.0782 45.3385 61.0796H59.1483C59.4266 61.0796 59.6935 61.1603 59.8904 61.3045C60.0872 61.4484 60.1977 61.6438 60.1977 61.8473C60.1977 62.0509 60.0872 62.2462 59.8904 62.3901C59.6935 62.5341 59.4266 62.6151 59.1483 62.6151Z" fill="#000000"/>
      `;
      break;
    default:
      icon = ``;
  }
  let badge = ``
  switch (moviment_status) {
    case "OFFLINE":
      badge = `
      <path d="M97.0312 37L79.4063 19.3409C77.9375 19.6834 76.5706 20.1973 75.3056 20.8826C74.0406 21.5678 72.9075 22.4242 71.9062 23.452L67.9688 19.4343C68.9687 18.4377 70.0469 17.5657 71.2031 16.8182C72.3594 16.0707 73.5937 15.4167 74.9062 14.8561L70.6875 10.6515C69.4063 11.3056 68.2106 12.03 67.1006 12.8248C65.9906 13.6196 64.9363 14.5147 63.9375 15.5101L60 11.4924C61 10.4958 62.0394 9.6007 63.1181 8.80712C64.1969 8.01355 65.345 7.25798 66.5625 6.5404L62.625 2.61616L65.25 0L99.75 34.3838L97.0312 37ZM82.5 34.0101C81.1875 34.0101 80.0781 33.551 79.1719 32.6329C78.2656 31.7148 77.8125 30.6166 77.8125 29.3384C77.8125 28.0303 78.2656 26.9246 79.1719 26.0215C80.0781 25.1183 81.1875 24.6667 82.5 24.6667C83.8125 24.6667 84.9219 25.1183 85.8281 26.0215C86.7343 26.9246 87.1875 28.0303 87.1875 29.3384C87.1875 30.6153 86.7343 31.7135 85.8281 32.6329C84.9219 33.5523 83.8125 34.0114 82.5 34.0101ZM93.5625 22.8914L92.2031 21.5366L90.8438 20.1818L84.0938 13.4545C86.625 13.7037 88.9918 14.3422 91.1944 15.37C93.3969 16.3977 95.3424 17.7525 97.0312 19.4343L93.5625 22.8914ZM101.062 15.5101C98.6563 13.112 95.8674 11.2358 92.6962 9.88162C89.5251 8.52744 86.1263 7.84974 82.5 7.84848C81.8438 7.84848 81.2113 7.87216 80.6025 7.91949C79.9937 7.96683 79.3762 8.03661 78.75 8.12879L73.9687 3.36364C75.3437 2.9899 76.7425 2.7096 78.165 2.52273C79.5876 2.33586 81.0324 2.24242 82.5 2.24242C86.9376 2.24242 91.0781 3.06777 94.9219 4.71843C98.7656 6.3691 102.125 8.62711 105 11.4924L101.062 15.5101Z" fill="#FF0000"/>
      `;
      break;
    case "MAINTENANCE":
      badge = `
      <path d="M93.8496 3.79989L104.241 21.7991C106.397 25.5323 103.703 30.1988 99.3919 30.1988H78.6081C74.2974 30.1988 71.6032 25.5323 73.7586 21.7991L84.1504 3.79989C86.3059 0.0666965 91.6941 0.0667126 93.8496 3.79989Z" fill="#FFC700" stroke="black"/>
      <path d="M89 12.9793V20.5658C89.0082 20.8211 89.0909 21.0624 89.2309 21.2392C89.3709 21.416 89.5573 21.5147 89.7512 21.5147C89.9451 21.5147 90.1315 21.416 90.2715 21.2392C90.4115 21.0624 90.4942 20.8211 90.5023 20.5658V12.9793C90.5022 12.7166 90.423 12.4646 90.2823 12.2786C90.1416 12.0925 89.9505 11.9874 89.7512 11.9863C89.3389 11.9863 89 12.4336 89 12.9793ZM89.7518 22.8754C89.3389 22.8754 89.0006 23.3167 89.0006 23.8624V24.5259C89.0021 24.7877 89.0818 25.038 89.2224 25.2228C89.363 25.4076 89.5533 25.5118 89.7518 25.5129C90.166 25.5129 90.503 25.0657 90.503 24.5259V23.8624C90.503 23.3167 90.1654 22.8754 89.7518 22.8754Z" fill="black"/>
      `;
      break;
    case "CLEANING":
      badge = `
      <path d="M93.8496 3.79989L104.241 21.7991C106.397 25.5323 103.703 30.1988 99.3919 30.1988H78.6081C74.2974 30.1988 71.6032 25.5323 73.7586 21.7991L84.1504 3.79989C86.3059 0.0666965 91.6941 0.0667126 93.8496 3.79989Z" fill="#FFC700" stroke="black"/>
      <path d="M89 12.9793V20.5658C89.0082 20.8211 89.0909 21.0624 89.2309 21.2392C89.3709 21.416 89.5573 21.5147 89.7512 21.5147C89.9451 21.5147 90.1315 21.416 90.2715 21.2392C90.4115 21.0624 90.4942 20.8211 90.5023 20.5658V12.9793C90.5022 12.7166 90.423 12.4646 90.2823 12.2786C90.1416 12.0925 89.9505 11.9874 89.7512 11.9863C89.3389 11.9863 89 12.4336 89 12.9793ZM89.7518 22.8754C89.3389 22.8754 89.0006 23.3167 89.0006 23.8624V24.5259C89.0021 24.7877 89.0818 25.038 89.2224 25.2228C89.363 25.4076 89.5533 25.5118 89.7518 25.5129C90.166 25.5129 90.503 25.0657 90.503 24.5259V23.8624C90.503 23.3167 90.1654 22.8754 89.7518 22.8754Z" fill="black"/>
      `;
      break;
    default:
      badge = ``;
  }
  let iconData =L.divIcon({
    className: "", 
    html: `
    <svg width="25" height="25" viewBox="0 0 105 105" fill="none" xmlns="http://www.w3.org/2000/svg">
    ${circle}
    ${icon}
    ${badge}
    </svg>
    `,
    iconSize: [28, 32],
    iconAnchor: [15, 24],
    popupAnchor: [0, -13],
  });
  return iconData
};

export default class FccPolygonMap extends LeafletMap {
  componentDidMount() {
    super.componentDidMount();
    
    this.pinMarkerLayer = L.layerGroup([]).addTo(this.map);

    this.markerCluster = L.markerClusterGroup({
      disableClusteringAtZoom: 16
    });
    this.map.addLayer(this.markerCluster);
    // this.pinMarkerIcon = L.icon({
    //   iconUrl: getSubpathSafeUrl("frontal-truck.png"),
    //   iconSize: [28, 32],
    //   iconAnchor: [15, 24],
    //   popupAnchor: [0, -13],
    // });

    // this.pinMarkerIcon = L.icon({
    //   iconUrl: getSubpathSafeUrl("app/assets/img/pin.png"),
    //   iconSize: [28, 32],
    //   iconAnchor: [15, 24],
    //   popupAnchor: [0, -13],
    // });

    this.pinMarkerIcon = L.divIcon({
      className: "", 
      html: `<svg width="25" height="25" viewBox="0 0 105 105" fill="none" xmlns="http://www.w3.org/2000/svg">
<circle cx="52.5" cy="52.5" r="47.5" fill="#D9D9D9" stroke="#4B5563" stroke-width="10"/>
<path d="M79.6004 67.545V59.5238C79.6004 59.1139 79.4902 58.708 79.2757 58.3293C79.0613 57.9506 78.7469 57.6064 78.3506 57.3167C77.9544 57.0267 77.484 56.7968 76.9664 56.64C76.4486 56.4829 75.8937 56.4024 75.3332 56.4024H74.2148V27.1059C74.2137 26.977 74.1705 26.8502 74.0888 26.7359C74.0072 26.6217 73.8894 26.5234 73.7451 26.4493L70.9832 25.1461C70.826 25.0783 70.6477 25.0412 70.4654 25.0384C70.2829 25.0356 70.1027 25.0672 69.9418 25.1301C69.7808 25.193 69.6448 25.2851 69.5467 25.3976C69.4484 25.5101 69.3916 25.6392 69.3813 25.7725V35.1877L68.5665 33.5916C68.0348 32.5462 67.0795 31.6446 65.8283 31.0074C64.5771 30.3701 63.0896 30.0275 61.5651 30.0255H42.908C41.3742 30.0271 39.8779 30.3728 38.621 31.0158C37.3641 31.6589 36.407 32.5685 35.8788 33.6219L35.1055 35.1877V25.7725C35.1041 25.6329 35.0515 25.4961 34.953 25.3765C34.8545 25.2569 34.7139 25.1589 34.5458 25.0928C34.3777 25.0267 34.1884 24.9949 33.9977 25.0007C33.8071 25.0065 33.622 25.0498 33.4621 25.1259L30.7001 26.4291C30.556 26.5032 30.4381 26.6015 30.3564 26.7157C30.2748 26.83 30.2316 26.9568 30.2306 27.0857V56.3822H29.112C28.5517 56.3822 27.9968 56.4627 27.479 56.6198C26.9613 56.7767 26.4909 57.0065 26.0946 57.2965C25.6984 57.5862 25.3841 57.9304 25.1696 58.3091C24.9552 58.6878 24.8448 59.0937 24.8448 59.5037V67.5248H23.0634C22.7813 67.5248 22.5109 67.6067 22.3114 67.7527C22.112 67.8985 22 68.0965 22 68.3026V72.6465C22 72.7487 22.0275 72.8499 22.0809 72.9443C22.1344 73.0386 22.2127 73.1243 22.3114 73.1966C22.4102 73.269 22.5274 73.3262 22.6564 73.3652C22.7854 73.4044 22.9237 73.4246 23.0634 73.4246H27.662V75.4449C27.6657 75.8584 27.8928 76.2542 28.2938 76.5456C28.6948 76.8372 29.2372 77.0006 29.8025 77.0006H35.4645C36.0286 77.0006 36.5695 76.8367 36.9683 76.5451C37.3672 76.2533 37.5912 75.8574 37.5912 75.4449V73.4246H66.8955V75.4449C66.8955 75.8574 67.1196 76.2533 67.5184 76.5451C67.9173 76.8367 68.4583 77.0006 69.0223 77.0006H74.6843C75.2495 77.0006 75.7919 76.8372 76.1929 76.5456C76.5941 76.2542 76.8212 75.8584 76.8247 75.4449V73.4246H81.4234C81.563 73.4246 81.7014 73.4044 81.8304 73.3652C81.9595 73.3262 82.0766 73.269 82.1753 73.1966C82.2741 73.1243 82.3525 73.0386 82.4057 72.9443C82.4592 72.8499 82.4869 72.7487 82.4869 72.6465V68.3228C82.4869 68.1167 82.3748 67.9187 82.1753 67.7729C81.9759 67.6269 81.7054 67.545 81.4234 67.545H79.6004ZM36.5279 39.5418H67.9588V47.2396H36.5279V39.5418ZM35.7959 65.3629H32.1502C31.6178 65.3603 31.1085 65.2037 30.7334 64.9274C30.3583 64.651 30.1477 64.2775 30.1478 63.888C30.1478 63.4968 30.3602 63.1217 30.7383 62.8451C31.1164 62.5685 31.6292 62.4131 32.164 62.4131H35.8098C36.3445 62.4131 36.8573 62.5685 37.2355 62.8451C37.6136 63.1217 37.826 63.4968 37.826 63.888C37.826 64.0826 37.7734 64.2751 37.6712 64.4548C37.569 64.6344 37.4193 64.7975 37.2306 64.9346C37.0419 65.0715 36.818 65.18 36.5718 65.2537C36.3255 65.3272 36.0619 65.3643 35.7959 65.3629ZM59.4934 65.7972H44.9933C44.7117 65.7986 44.4325 65.7592 44.172 65.6808C43.9114 65.6026 43.6747 65.4873 43.4756 65.3418C43.2765 65.196 43.1189 65.0229 43.0119 64.8323C42.905 64.6416 42.8509 64.4376 42.8528 64.2315V54.3415C42.8527 54.1363 42.9082 53.9332 43.0159 53.7437C43.1237 53.5543 43.2816 53.3824 43.4805 53.2378C43.6795 53.0931 43.9155 52.9788 44.1752 52.9013C44.4348 52.8236 44.7128 52.7844 44.9933 52.7858H59.4934C59.774 52.7844 60.052 52.8236 60.3115 52.9013C60.5712 52.9788 60.8073 53.0931 61.0062 53.2378C61.2052 53.3824 61.3631 53.5543 61.4708 53.7437C61.5787 53.9332 61.634 54.1363 61.634 54.3415V64.2315C61.6359 64.4376 61.5817 64.6416 61.4747 64.8323C61.368 65.0229 61.2103 65.196 61.0111 65.3418C60.812 65.4873 60.5755 65.6026 60.3148 65.6808C60.0544 65.7592 59.7752 65.7986 59.4934 65.7972ZM72.3365 65.3629H68.6908C68.1561 65.3629 67.6433 65.2075 67.2651 64.9309C66.8871 64.6543 66.6745 64.2791 66.6745 63.888C66.6745 63.4968 66.8871 63.1217 67.2651 62.8451C67.6433 62.5685 68.1561 62.4131 68.6908 62.4131H72.3365C72.8595 62.4157 73.3606 62.5666 73.7343 62.8343C74.1078 63.1019 74.3246 63.4651 74.3389 63.8476C74.3464 64.0439 74.3002 64.2392 74.2029 64.4221C74.1057 64.605 73.9598 64.7719 73.7733 64.9133C73.5868 65.0544 73.3636 65.1668 73.1168 65.2441C72.8702 65.3213 72.6049 65.3617 72.3365 65.3629ZM59.1483 58.4934H45.3385C45.1995 58.4948 45.0615 58.476 44.9326 58.438C44.8037 58.3999 44.6863 58.3436 44.5874 58.2722C44.4885 58.2008 44.4099 58.1156 44.3563 58.0219C44.3028 57.928 44.2751 57.8273 44.2752 57.7256C44.2751 57.624 44.3028 57.5233 44.3563 57.4296C44.4099 57.3357 44.4885 57.2507 44.5874 57.1793C44.6863 57.1077 44.8037 57.0513 44.9326 57.0135C45.0615 56.9755 45.1995 56.9565 45.3385 56.9579H59.1483C59.4266 56.9579 59.6935 57.0389 59.8904 57.1828C60.0872 57.3268 60.1977 57.5221 60.1977 57.7256C60.1977 57.9294 60.0872 58.1245 59.8904 58.2687C59.6935 58.4126 59.4266 58.4934 59.1483 58.4934ZM59.1483 55.372H45.3385C45.1995 55.3731 45.0615 55.3543 44.9326 55.3163C44.8037 55.2783 44.6863 55.2222 44.5874 55.1505C44.4885 55.0792 44.4099 54.9942 44.3563 54.9003C44.3028 54.8064 44.2751 54.7059 44.2752 54.6042C44.2751 54.5025 44.3028 54.4018 44.3563 54.3079C44.4099 54.2142 44.4885 54.129 44.5874 54.0576C44.6863 53.9863 44.8037 53.9299 44.9326 53.8919C45.0615 53.8538 45.1995 53.8351 45.3385 53.8365H59.1483C59.4266 53.8365 59.6935 53.9172 59.8904 54.0612C60.0872 54.2053 60.1977 54.4004 60.1977 54.6042C60.1977 54.8078 60.0872 55.0031 59.8904 55.147C59.6935 55.2909 59.4266 55.372 59.1483 55.372ZM59.1483 64.7367H45.3385C45.1995 64.7379 45.0615 64.7191 44.9326 64.6811C44.8037 64.643 44.6863 64.5867 44.5874 64.5153C44.4885 64.444 44.4099 64.3587 44.3563 64.265C44.3028 64.1711 44.2751 64.0706 44.2752 63.9687C44.2656 63.8631 44.2861 63.7567 44.3355 63.6572C44.3848 63.5574 44.4618 63.4661 44.5617 63.3893C44.6616 63.3123 44.7822 63.2515 44.9159 63.2104C45.0496 63.1693 45.1935 63.1489 45.3385 63.1505H59.1483C59.4266 63.1505 59.6935 63.2315 59.8904 63.3755C60.0872 63.5194 60.1977 63.7147 60.1977 63.9183C60.2074 64.0232 60.1872 64.1286 60.1386 64.2277C60.09 64.3268 60.0143 64.4174 59.916 64.4942C59.8174 64.571 59.6985 64.632 59.5666 64.6738C59.4345 64.7154 59.2921 64.737 59.1483 64.7367ZM59.1483 61.6151H45.3385C45.1995 61.6165 45.0615 61.5974 44.9326 61.5594C44.8037 61.5216 44.6863 61.4653 44.5874 61.3937C44.4885 61.3223 44.4099 61.2373 44.3563 61.1434C44.3028 61.0497 44.2751 60.949 44.2752 60.8473C44.2751 60.7457 44.3028 60.6449 44.3563 60.551C44.4099 60.4573 44.4885 60.3721 44.5874 60.3007C44.6863 60.2294 44.8037 60.173 44.9326 60.135C45.0615 60.097 45.1995 60.0782 45.3385 60.0796H59.1483C59.4266 60.0796 59.6935 60.1603 59.8904 60.3045C60.0872 60.4484 60.1977 60.6438 60.1977 60.8473C60.1977 61.0509 60.0872 61.2462 59.8904 61.3901C59.6935 61.5341 59.4266 61.6151 59.1483 61.6151Z" fill="black"/>
<path d="M97.0312 37L79.4063 19.3409C77.9375 19.6834 76.5706 20.1973 75.3056 20.8826C74.0406 21.5678 72.9075 22.4242 71.9062 23.452L67.9688 19.4343C68.9687 18.4377 70.0469 17.5657 71.2031 16.8182C72.3594 16.0707 73.5937 15.4167 74.9062 14.8561L70.6875 10.6515C69.4063 11.3056 68.2106 12.03 67.1006 12.8248C65.9906 13.6196 64.9363 14.5147 63.9375 15.5101L60 11.4924C61 10.4958 62.0394 9.6007 63.1181 8.80712C64.1969 8.01355 65.345 7.25798 66.5625 6.5404L62.625 2.61616L65.25 0L99.75 34.3838L97.0312 37ZM82.5 34.0101C81.1875 34.0101 80.0781 33.551 79.1719 32.6329C78.2656 31.7148 77.8125 30.6166 77.8125 29.3384C77.8125 28.0303 78.2656 26.9246 79.1719 26.0215C80.0781 25.1183 81.1875 24.6667 82.5 24.6667C83.8125 24.6667 84.9219 25.1183 85.8281 26.0215C86.7343 26.9246 87.1875 28.0303 87.1875 29.3384C87.1875 30.6153 86.7343 31.7135 85.8281 32.6329C84.9219 33.5523 83.8125 34.0114 82.5 34.0101ZM93.5625 22.8914L92.2031 21.5366L90.8438 20.1818L84.0938 13.4545C86.625 13.7037 88.9918 14.3422 91.1944 15.37C93.3969 16.3977 95.3424 17.7525 97.0312 19.4343L93.5625 22.8914ZM101.062 15.5101C98.6563 13.112 95.8674 11.2358 92.6962 9.88162C89.5251 8.52744 86.1263 7.84974 82.5 7.84848C81.8438 7.84848 81.2113 7.87216 80.6025 7.91949C79.9937 7.96683 79.3762 8.03661 78.75 8.12879L73.9687 3.36364C75.3437 2.9899 76.7425 2.7096 78.165 2.52273C79.5876 2.33586 81.0324 2.24242 82.5 2.24242C86.9376 2.24242 91.0781 3.06777 94.9219 4.71843C98.7656 6.3691 102.125 8.62711 105 11.4924L101.062 15.5101Z" fill="#FF0000"/>
</svg>`,
        iconSize: [28, 32],
        iconAnchor: [15, 24],
        popupAnchor: [0, -13],
    });

    this.pinMarkerIcon1 = L.divIcon({
      className: "", 
      html: `<svg width="25" height="25" viewBox="0 0 106 106" fill="none" xmlns="http://www.w3.org/2000/svg">
<circle cx="52.5" cy="53.5" r="47.5" fill="#D9D9D9" stroke="#4B5563" stroke-width="10"/>
<path d="M79.6004 68.545V60.5238C79.6004 60.1139 79.4902 59.708 79.2757 59.3293C79.0613 58.9506 78.7469 58.6064 78.3506 58.3167C77.9544 58.0267 77.484 57.7968 76.9664 57.64C76.4486 57.4829 75.8937 57.4024 75.3332 57.4024H74.2148V28.1059C74.2137 27.977 74.1705 27.8502 74.0888 27.7359C74.0072 27.6217 73.8894 27.5234 73.7451 27.4493L70.9832 26.1461C70.826 26.0783 70.6477 26.0412 70.4654 26.0384C70.2829 26.0356 70.1027 26.0672 69.9418 26.1301C69.7808 26.193 69.6448 26.2851 69.5467 26.3976C69.4484 26.5101 69.3916 26.6392 69.3813 26.7725V36.1877L68.5665 34.5916C68.0348 33.5462 67.0795 32.6446 65.8283 32.0074C64.5771 31.3701 63.0896 31.0275 61.5651 31.0255H42.908C41.3742 31.0271 39.8779 31.3728 38.621 32.0158C37.3641 32.6589 36.407 33.5685 35.8788 34.6219L35.1055 36.1877V26.7725C35.1041 26.6329 35.0515 26.4961 34.953 26.3765C34.8545 26.2569 34.7139 26.1589 34.5458 26.0928C34.3777 26.0267 34.1884 25.9949 33.9977 26.0007C33.8071 26.0065 33.622 26.0498 33.4621 26.1259L30.7001 27.4291C30.556 27.5032 30.4381 27.6015 30.3564 27.7157C30.2748 27.83 30.2316 27.9568 30.2306 28.0857V57.3822H29.112C28.5517 57.3822 27.9968 57.4627 27.479 57.6198C26.9613 57.7767 26.4909 58.0065 26.0946 58.2965C25.6984 58.5862 25.3841 58.9304 25.1696 59.3091C24.9552 59.6878 24.8448 60.0937 24.8448 60.5037V68.5248H23.0634C22.7813 68.5248 22.5109 68.6067 22.3114 68.7527C22.112 68.8985 22 69.0965 22 69.3026V73.6465C22 73.7487 22.0275 73.8499 22.0809 73.9443C22.1344 74.0386 22.2127 74.1243 22.3114 74.1966C22.4102 74.269 22.5274 74.3262 22.6564 74.3652C22.7854 74.4044 22.9237 74.4246 23.0634 74.4246H27.662V76.4449C27.6657 76.8584 27.8928 77.2542 28.2938 77.5456C28.6948 77.8372 29.2372 78.0006 29.8025 78.0006H35.4645C36.0286 78.0006 36.5695 77.8367 36.9683 77.5451C37.3672 77.2533 37.5912 76.8574 37.5912 76.4449V74.4246H66.8955V76.4449C66.8955 76.8574 67.1196 77.2533 67.5184 77.5451C67.9173 77.8367 68.4583 78.0006 69.0223 78.0006H74.6843C75.2495 78.0006 75.7919 77.8372 76.1929 77.5456C76.5941 77.2542 76.8212 76.8584 76.8247 76.4449V74.4246H81.4234C81.563 74.4246 81.7014 74.4044 81.8304 74.3652C81.9595 74.3262 82.0766 74.269 82.1753 74.1966C82.2741 74.1243 82.3525 74.0386 82.4057 73.9443C82.4592 73.8499 82.4869 73.7487 82.4869 73.6465V69.3228C82.4869 69.1167 82.3748 68.9187 82.1753 68.7729C81.9759 68.6269 81.7054 68.545 81.4234 68.545H79.6004ZM36.5279 40.5418H67.9588V48.2396H36.5279V40.5418ZM35.7959 66.3629H32.1502C31.6178 66.3603 31.1085 66.2037 30.7334 65.9274C30.3583 65.651 30.1477 65.2775 30.1478 64.888C30.1478 64.4968 30.3602 64.1217 30.7383 63.8451C31.1164 63.5685 31.6292 63.4131 32.164 63.4131H35.8098C36.3445 63.4131 36.8573 63.5685 37.2355 63.8451C37.6136 64.1217 37.826 64.4968 37.826 64.888C37.826 65.0826 37.7734 65.2751 37.6712 65.4548C37.569 65.6344 37.4193 65.7975 37.2306 65.9346C37.0419 66.0715 36.818 66.18 36.5718 66.2537C36.3255 66.3272 36.0619 66.3643 35.7959 66.3629ZM59.4934 66.7972H44.9933C44.7117 66.7986 44.4325 66.7592 44.172 66.6808C43.9114 66.6026 43.6747 66.4873 43.4756 66.3418C43.2765 66.196 43.1189 66.0229 43.0119 65.8323C42.905 65.6416 42.8509 65.4376 42.8528 65.2315V55.3415C42.8527 55.1363 42.9082 54.9332 43.0159 54.7437C43.1237 54.5543 43.2816 54.3824 43.4805 54.2378C43.6795 54.0931 43.9155 53.9788 44.1752 53.9013C44.4348 53.8236 44.7128 53.7844 44.9933 53.7858H59.4934C59.774 53.7844 60.052 53.8236 60.3115 53.9013C60.5712 53.9788 60.8073 54.0931 61.0062 54.2378C61.2052 54.3824 61.3631 54.5543 61.4708 54.7437C61.5787 54.9332 61.634 55.1363 61.634 55.3415V65.2315C61.6359 65.4376 61.5817 65.6416 61.4747 65.8323C61.368 66.0229 61.2103 66.196 61.0111 66.3418C60.812 66.4873 60.5755 66.6026 60.3148 66.6808C60.0544 66.7592 59.7752 66.7986 59.4934 66.7972ZM72.3365 66.3629H68.6908C68.1561 66.3629 67.6433 66.2075 67.2651 65.9309C66.8871 65.6543 66.6745 65.2791 66.6745 64.888C66.6745 64.4968 66.8871 64.1217 67.2651 63.8451C67.6433 63.5685 68.1561 63.4131 68.6908 63.4131H72.3365C72.8595 63.4157 73.3606 63.5666 73.7343 63.8343C74.1078 64.1019 74.3246 64.4651 74.3389 64.8476C74.3464 65.0439 74.3002 65.2392 74.2029 65.4221C74.1057 65.605 73.9598 65.7719 73.7733 65.9133C73.5868 66.0544 73.3636 66.1668 73.1168 66.2441C72.8702 66.3213 72.6049 66.3617 72.3365 66.3629ZM59.1483 59.4934H45.3385C45.1995 59.4948 45.0615 59.476 44.9326 59.438C44.8037 59.3999 44.6863 59.3436 44.5874 59.2722C44.4885 59.2008 44.4099 59.1156 44.3563 59.0219C44.3028 58.928 44.2751 58.8273 44.2752 58.7256C44.2751 58.624 44.3028 58.5233 44.3563 58.4296C44.4099 58.3357 44.4885 58.2507 44.5874 58.1793C44.6863 58.1077 44.8037 58.0513 44.9326 58.0135C45.0615 57.9755 45.1995 57.9565 45.3385 57.9579H59.1483C59.4266 57.9579 59.6935 58.0389 59.8904 58.1828C60.0872 58.3268 60.1977 58.5221 60.1977 58.7256C60.1977 58.9294 60.0872 59.1245 59.8904 59.2687C59.6935 59.4126 59.4266 59.4934 59.1483 59.4934ZM59.1483 56.372H45.3385C45.1995 56.3731 45.0615 56.3543 44.9326 56.3163C44.8037 56.2783 44.6863 56.2222 44.5874 56.1505C44.4885 56.0792 44.4099 55.9942 44.3563 55.9003C44.3028 55.8064 44.2751 55.7059 44.2752 55.6042C44.2751 55.5025 44.3028 55.4018 44.3563 55.3079C44.4099 55.2142 44.4885 55.129 44.5874 55.0576C44.6863 54.9863 44.8037 54.9299 44.9326 54.8919C45.0615 54.8538 45.1995 54.8351 45.3385 54.8365H59.1483C59.4266 54.8365 59.6935 54.9172 59.8904 55.0612C60.0872 55.2053 60.1977 55.4004 60.1977 55.6042C60.1977 55.8078 60.0872 56.0031 59.8904 56.147C59.6935 56.2909 59.4266 56.372 59.1483 56.372ZM59.1483 65.7367H45.3385C45.1995 65.7379 45.0615 65.7191 44.9326 65.6811C44.8037 65.643 44.6863 65.5867 44.5874 65.5153C44.4885 65.444 44.4099 65.3587 44.3563 65.265C44.3028 65.1711 44.2751 65.0706 44.2752 64.9687C44.2656 64.8631 44.2861 64.7567 44.3355 64.6572C44.3848 64.5574 44.4618 64.4661 44.5617 64.3893C44.6616 64.3123 44.7822 64.2515 44.9159 64.2104C45.0496 64.1693 45.1935 64.1489 45.3385 64.1505H59.1483C59.4266 64.1505 59.6935 64.2315 59.8904 64.3755C60.0872 64.5194 60.1977 64.7147 60.1977 64.9183C60.2074 65.0232 60.1872 65.1286 60.1386 65.2277C60.09 65.3268 60.0143 65.4174 59.916 65.4942C59.8174 65.571 59.6985 65.632 59.5666 65.6738C59.4345 65.7154 59.2921 65.737 59.1483 65.7367ZM59.1483 62.6151H45.3385C45.1995 62.6165 45.0615 62.5974 44.9326 62.5594C44.8037 62.5216 44.6863 62.4653 44.5874 62.3937C44.4885 62.3223 44.4099 62.2373 44.3563 62.1434C44.3028 62.0497 44.2751 61.949 44.2752 61.8473C44.2751 61.7457 44.3028 61.6449 44.3563 61.551C44.4099 61.4573 44.4885 61.3721 44.5874 61.3007C44.6863 61.2294 44.8037 61.173 44.9326 61.135C45.0615 61.097 45.1995 61.0782 45.3385 61.0796H59.1483C59.4266 61.0796 59.6935 61.1603 59.8904 61.3045C60.0872 61.4484 60.1977 61.6438 60.1977 61.8473C60.1977 62.0509 60.0872 62.2462 59.8904 62.3901C59.6935 62.5341 59.4266 62.6151 59.1483 62.6151Z" fill="black"/>
<path d="M93.8496 3.79989L104.241 21.7991C106.397 25.5323 103.703 30.1988 99.3919 30.1988H78.6081C74.2974 30.1988 71.6032 25.5323 73.7586 21.7991L84.1504 3.79989C86.3059 0.0666965 91.6941 0.0667126 93.8496 3.79989Z" fill="#FFC700" stroke="black"/>
<path d="M89 12.9793V20.5658C89.0082 20.8211 89.0909 21.0624 89.2309 21.2392C89.3709 21.416 89.5573 21.5147 89.7512 21.5147C89.9451 21.5147 90.1315 21.416 90.2715 21.2392C90.4115 21.0624 90.4942 20.8211 90.5023 20.5658V12.9793C90.5022 12.7166 90.423 12.4646 90.2823 12.2786C90.1416 12.0925 89.9505 11.9874 89.7512 11.9863C89.3389 11.9863 89 12.4336 89 12.9793ZM89.7518 22.8754C89.3389 22.8754 89.0006 23.3167 89.0006 23.8624V24.5259C89.0021 24.7877 89.0818 25.038 89.2224 25.2228C89.363 25.4076 89.5533 25.5118 89.7518 25.5129C90.166 25.5129 90.503 25.0657 90.503 24.5259V23.8624C90.503 23.3167 90.1654 22.8754 89.7518 22.8754Z" fill="black"/>
</svg>`,
        iconSize: [10, 10],
        iconAnchor: [15, 24],
        popupAnchor: [0, -13],
    });

    this.componentDidUpdate({}, {});
  }

  componentDidUpdate(prevProps, prevState) {
    super.componentDidUpdate(prevProps, prevState);
    
    this._addPolygonLayer();
    
    this._createMarker();
  }

  _addPolygonLayer = () => {
    try {
      const { series, onHoverChange, onVisualizationClick, settings } = this.props;

      let findPolygonList = []
  
      for (let i = 0; i < series.length; i++) {
        const targetData = series[i].data
        const polygonIndex = targetData.cols.findIndex(item => item.name === settings["map.polygon_column"])
        const colorIndex = targetData.cols.findIndex(item => item.name === settings["map.color_column"])
        const typeIndex = targetData.cols.findIndex(item => item.name === settings["map.type_column"])
        if(polygonIndex>-1){
          const rowToLoop = targetData.rows
          for (let rowI = 0; rowI < rowToLoop.length; rowI++) {
            if(targetData.rows[rowI][polygonIndex]){
              // let polygonListToLoop = JSON.parse(targetData.rows[rowI][polygonIndex])
              // let newPolygondata = []
              // for (let coorI = 0; coorI < polygonListToLoop.length; coorI++) {
              //   newPolygondata.push([
              //     polygonListToLoop[coorI][1],
              //     polygonListToLoop[coorI][0]
              //   ])
              // }
              // findPolygonList.push(newPolygondata)
              let newPolygondata = targetData.rows[rowI][polygonIndex].replace("POLYGON ((", "")
              .replace("))", "")
              .split(",")
              .map(coordStr => {
                const [lng, lat] = coordStr.trim().split(" ").map(Number);
                return [lat, lng]
              })
              let polygonColor = "green"
              if(targetData.rows[rowI][colorIndex]){
                polygonColor = targetData.rows[rowI][colorIndex]
              }
              if(targetData.rows[rowI][typeIndex]){
                switch (targetData.rows[rowI][typeIndex]) {
                  case "SECTOR":
                    polygonColor = `green`;
                    break;
                  case "GENERAL":
                    polygonColor = `red`;
                    break;
                  case "POI":
                    polygonColor = `blue`;
                    break;
                  default:
                    polygonColor = `green`;
                }
              }
              findPolygonList.push({
                coordinates:newPolygondata,
                color: polygonColor
              })
            }
          }
        }
      }
      
      if (this.polygonLayers) {
        this.polygonLayers.forEach(layer => this.map.removeLayer(layer));
      }
      
      this.polygonLayers = [];
      findPolygonList.forEach((polygonData, index) => {
        const polygonLayer = L.polygon(polygonData.coordinates, {
          color: polygonData.color,
          fillColor: polygonData.color,
          fillOpacity: 0.2,
        }).addTo(this.map);
  
        this.polygonLayers.push(polygonLayer); 

        if (onHoverChange) {
          polygonLayer.on("mousemove", e => {
            const { cols, rows } = series[0].data;
            const hover = {
              dimensions: cols.map((col, colIndex) => ({
                value: rows[index] ? rows[index][colIndex] : null,
                column: col,
              })),
              element: e.target._path,
            };
            e.target.setStyle({
              color: 'yellow',
              fillColor: 'yellow'
            })
            onHoverChange(hover);
          });
  
          polygonLayer.on("mouseout", e => {
            e.target.setStyle({
              color: polygonData.color,
              fillColor: polygonData.color
            })
            onHoverChange(null);
          });
        }

        if (onVisualizationClick) {
          polygonLayer.on("click", () => {
            onHoverChange(null);
            const { cols, rows } = series[0].data;
            const pkIndex = _.findIndex(cols, isPK);
            const hasPk = pkIndex >= 0;
  
            const data = cols.map((col, colIndex) => ({
              col,
              value: rows[index] ? rows[index][colIndex] : null,
            }));
  
            onVisualizationClick({
              value: hasPk && rows[index] ? rows[index][pkIndex] : null,
              column: hasPk ? cols[pkIndex] : null,
              element: polygonLayer._path,
              origin: { row: rows[index], cols },
              settings,
              data,
            });
          });
        }
      });
  
    } catch (error) {
      console.error("Error while adding polygon:", error);
    }
  };  

  _createMarker = () => {
    try {
      const { pinMarkerLayer } = this;
      const { series, onHoverChange, onVisualizationClick, settings } = this.props;
      
      let findMarkerList = []
  
      for (let i = 0; i < series.length; i++) {
        const targetData = series[i].data
        const latitudeIndex = targetData.cols.findIndex(item => item.name === settings["map.latitude_column"])
        const longitudeIndex = targetData.cols.findIndex(item => item.name === settings["map.longitude_column"])
        const movimentStatusIndex = targetData.cols.findIndex(item => item.name === settings["map.moviment_status_column"])
        const loadStatusIndex = targetData.cols.findIndex(item => item.name === settings["map.load_status_column"])
        const detailIndex = targetData.cols.findIndex(item => item.name === 'detail_data')
        if(latitudeIndex>-1 && longitudeIndex>-1){
          const rowToLoop = targetData.rows
          for (let rowI = 0; rowI < rowToLoop.length; rowI++) {
            if(targetData.rows[rowI][latitudeIndex] && targetData.rows[rowI][longitudeIndex]){
              const detailData = JSON.parse(targetData.rows[rowI][detailIndex])
              findMarkerList.push({
                coordinate:[
                  targetData.rows[rowI][latitudeIndex],
                  targetData.rows[rowI][longitudeIndex]
                ],
                // moviment_status:detailData['moviment_status'],
                // load_status:detailData['load_status'],
                moviment_status:targetData.rows[rowI][movimentStatusIndex] ? targetData.rows[rowI][movimentStatusIndex] : null,
                load_status:targetData.rows[rowI][loadStatusIndex] ? targetData.rows[rowI][loadStatusIndex] : null,
              })
            }
          }
        }
      }
      
      // if (this.pinMarkerLayer) {
        //   this.pinMarkerLayer.forEach(layer => this.map.removeLayer(layer));
        // }
        
      this.pinMarkerLayer = [];
      this.markerCluster.clearLayers();
      // this.markerCluster = L.markerClusterGroup();

      findMarkerList.forEach((data, rowIndex) => {
        // const marker = L.marker(data, { icon: this.pinMarkerIcon });
        // pinMarkerLayer.addLayer(marker);

        // const markerLayer = L.marker(data.coordinate, { icon: _generateIcon(
        //   data.moviment_status,
        //   data.load_status
        // ) }).addTo(this.map);
        // this.pinMarkerLayer.push(markerLayer); 
        
        const markerLayer = L.marker(data.coordinate, { icon: _generateIcon(
          data.moviment_status,
          data.load_status
        )});
        this.markerCluster.addLayer(markerLayer);
        this.map.addLayer(this.markerCluster);
        
        const { onHoverChange, onVisualizationClick, settings } = this.props;
        if (onHoverChange) {
          markerLayer.on("mousemove", e => {
            const {
              series: [
                {
                  data: { cols, rows },
                },
              ],
            } = this.props;
            const hover = {
              dimensions: cols.map((col, colIndex) => ({
                value: rows[rowIndex][colIndex],
                column: col,
              })),
              element: markerLayer._icon,
            };
            onHoverChange(hover);
          });
          markerLayer.on("mouseout", () => {
            onHoverChange(null);
          });
        }
        if (onVisualizationClick) {
          markerLayer.on("click", () => {
            const {
              series: [
                {
                  data: { cols, rows },
                },
              ],
            } = this.props;
            
            const pkIndex = _.findIndex(cols, isPK);
            const hasPk = pkIndex >= 0;

            const data = cols.map((col, index) => ({
              col,
              value: rows[rowIndex][index],
            }));
            const detailIndex = cols.findIndex(item => item.name === 'detail_data')
            let newData = []
            let detailData = Object.entries(JSON.parse(rows[rowIndex][detailIndex]))
            for (let i = 0; i < detailData.length; i++) {
              newData.push({
                col:{
                  name:detailData[i][0]
                },
                value:detailData[i][1]
              })
            }

            onVisualizationClick({
              value: hasPk ? rows[rowIndex][pkIndex] : null,
              column: hasPk ? cols[pkIndex] : null,
              element: markerLayer._icon,
              origin: { row: rows[rowIndex], cols },
              settings,
              newData,
            });
          });
        }
      });
  
    } catch (error) {
      console.error("Error while adding marker:", error);
    }
  };
  
}
